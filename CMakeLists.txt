CMAKE_MINIMUM_REQUIRED(VERSION 3.2)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

PROJECT(Quadpong VERSION 0.1.0)

FIND_PACKAGE(SDL2       REQUIRED)
FIND_PACKAGE(SDL2_image REQUIRED)
FIND_PACKAGE(SDL2_ttf   REQUIRED)
FIND_PACKAGE(FlatCC     REQUIRED)
FIND_PACKAGE(Doxygen)

if(DOXYGEN_FOUND)
    SET(doxyfile_in ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in)
    SET(doxyfile    ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)

    CONFIGURE_FILE(${doxyfile_in} ${doxyfile} @ONLY)

    ADD_CUSTOM_TARGET(doc
        COMMAND ${DOXYGEN_EXECUTABLE} ${doxyfile}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM
    )
endif()

SET(EXE "quadpong")

SET(
    ${EXE}_FBS
    src/packet.fbs
)

SET(
    ${EXE}_SRCS
	src/main.c
	src/quadpong.h
    src/vec2.h
	src/game_time.h
	src/util.h
	src/util.c
	src/sprite.h
	src/sprite.c
	src/sprite_text.h
	src/sprite_text.c
	src/object.h
	src/object.c
	src/ball.h
	src/ball.c
	src/player.h
	src/player.c
	src/scene.h
	src/scene.c
	src/game_scene.h
	src/game_scene.c
	src/menu_scene.h
	src/menu_scene.c
)

IF(FLATCC_FOUND)
    FLATCC_GENERATE_C_HEADERS(
        ${EXE}_flatcc
        ${${EXE}_FBS}
    )
ENDIF()

SOURCE_GROUP("src" FILES ${${EXE}_SRCS} ${${EXE}_flatcc_OUTPUTS})

INCLUDE_DIRECTORIES(
    ${CMAKE_SOURCE_DIR}/src
    ${CMAKE_BINARY_DIR}
)

ADD_EXECUTABLE(
    ${EXE}
    ${${EXE}_SRCS}
    ${${EXE}_flatcc_OUTPUTS}
)

IF(SDL2_FOUND AND SDL2_IMAGE_FOUND AND SDL2_TTF_FOUND)
	INCLUDE_DIRECTORIES(${SDL2_INCLUDE_DIR} ${SDL2_IMAGE_INCLUDE_DIR} ${SDL2_TTF_INCLUDE_DIR})
	TARGET_LINK_LIBRARIES(${EXE} ${SDL2_LIBRARY} ${SDL2_IMAGE_LIBRARY} ${SDL2_TTF_LIBRARY})
ENDIF()

IF(FLATCC_FOUND)
    INCLUDE_DIRECTORIES(${FLATCC_INCLUDE_DIR})
    TARGET_LINK_LIBRARIES(${EXE} ${FLATCC_RUNTIME_LIBRARY})
ENDIF()

IF(MSVC)
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:MSVCRT")
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
	TARGET_LINK_LIBRARIES(${EXE} WS2_32 Mswsock AdvApi32)
ENDIF()

IF(UNIX)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -pedantic -Wno-unused-parameter -std=c11")
	ADD_DEFINITIONS(-D_GNU_SOURCE -D_XOPEN_SOURCE=700)
	TARGET_LINK_LIBRARIES(${EXE} png z m)

	ADD_CUSTOM_TARGET(
		run
		COMMAND ${CMAKE_BINARY_DIR}/${EXE}
		DEPENDS ${EXE}
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)

    ADD_CUSTOM_TARGET(
		format
        COMMAND clang-format -i ${${EXE}_SRCS}
        DEPENDS ${${EXE}_SRCS}
		WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	)
ENDIF()

IF(NOT (${CMAKE_VERSION} VERSION_LESS "3.6"))
	SET_PROPERTY(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${EXE})
ENDIF()

IF(NOT (${CMAKE_VERSION} VERSION_LESS "3.8"))
    SET_TARGET_PROPERTIES(${EXE} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}")
ENDIF()
